#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_PARTITIONS 10
#define MAX_PROCESSES 10

void bestFit(int partitionSizes[], int numPartitions, int processSizes[], int numProcesses) {
    int allocation[MAX_PROCESSES];

    // Initialize all allocations to -1 (indicating not allocated)
    for (int i = 0; i < numProcesses; i++) {
        allocation[i] = -1;
    }

    // Process each process
    for (int i = 0; i < numProcesses; i++) {
        int bestIndex = -1;
        for (int j = 0; j < numPartitions; j++) {
            if (partitionSizes[j] >= processSizes[i]) {
                if (bestIndex == -1 || partitionSizes[j] < partitionSizes[bestIndex]) {
                    bestIndex = j;
                }
            }
        }

        // If we found a partition for the current process
        if (bestIndex != -1) {
            allocation[i] = bestIndex;
            partitionSizes[bestIndex] -= processSizes[i];
        }
    }

    // Output results
    printf("\nProcess No.\tProcess Size\tPartition No.\n");
    for (int i = 0; i < numProcesses; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSizes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int partitionSizes[MAX_PARTITIONS], processSizes[MAX_PROCESSES];
    int numPartitions, numProcesses;

    // Input number of partitions and their sizes
    printf("Enter number of partitions: ");
    scanf("%d", &numPartitions);
    printf("Enter sizes of partitions: \n");
    for (int i = 0; i < numPartitions; i++) {
        scanf("%d", &partitionSizes[i]);
    }

    // Input number of processes and their sizes
    printf("Enter number of processes: ");
    scanf("%d", &numProcesses);
    printf("Enter sizes of processes: \n");
    for (int i = 0; i < numProcesses; i++) {
        scanf("%d", &processSizes[i]);
    }

    // Perform best fit allocation
    bestFit(partitionSizes, numPartitions, processSizes, numProcesses);

    return 0;
}
