#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 100

// Structure to represent a process
struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
    int remaining_time; // Remaining time
    int completion_time; // Completion time
    int waiting_time; // Waiting time
    int turnaround_time; // Turnaround time
};

// Function to find the waiting time for all processes
void findWaitingTime(struct Process proc[], int n, int quantum) {
    int t = 0; // Current time
    int remaining_processes = n;
    bool done = false;

    while (remaining_processes > 0) {
        done = true;

        for (int i = 0; i < n; i++) {
            if (proc[i].remaining_time > 0) {
                done = false; // There is a pending process

                if (proc[i].remaining_time > quantum) {
                    t += quantum;
                    proc[i].remaining_time -= quantum;
                } else {
                    t += proc[i].remaining_time;
                    proc[i].waiting_time = t - proc[i].burst_time;
                    proc[i].remaining_time = 0;
                    remaining_processes--;
                }
            }
        }

        if (done) {
            break;
        }
    }
}

// Function to find the turnaround time for all processes
void findTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++) {
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
    }
}

// Function to find the average time
void findAverageTime(struct Process proc[], int n, int quantum) {
    findWaitingTime(proc, n, quantum);
    findTurnaroundTime(proc, n);

    printf("Processes    Burst Time    Waiting Time    Turnaround Time\n");

    int total_waiting_time = 0, total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf(" %d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("Average waiting time = %.2f\n", (float)total_waiting_time / n);
    printf("Average turnaround time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n; // Number of processes
    int quantum; // Time quantum

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[MAX_PROCESSES];

    for (int i = 0; i < n; i++) {
        proc[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &proc[i].arrival_time, &proc[i].burst_time);
        proc[i].remaining_time = proc[i].burst_time;
    }

    printf("Enter the time quantum: ");
    scanf("%d", &quantum);

    findAverageTime(proc, n, quantum);

    return 0;
}
